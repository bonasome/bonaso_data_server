# Generated by Django 5.2.2 on 2025-07-09 11:15

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0004_organization_full_name'),
        ('projects', '0014_client_full_name_client_updated_by_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('under_18', 'Under 18'), ('18_24', '18–24'), ('25_34', '25–34'), ('35_44', '35–44'), ('45_64', '45–64'), ('65_plus', '65+')], max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Citizenship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('citizen', 'Citizen'), ('non_citizen', 'Non-Citizen')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DisabilityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('VI', 'Visually Impaired'), ('PD', 'Physical Disability'), ('ID', 'Intellectual Disability'), ('HD', 'Hearing Impaired'), ('PSY', 'Psychiatric Disability'), ('SI', 'Speech Impaired'), ('OTHER', 'Other Disability')], max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='KeyPopulationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('FSW', 'Female Sex Workers'), ('MSM', 'Men Who Have Sex With Men'), ('PWID', 'People Who Inject Drugs'), ('TG', 'Transgender'), ('INTERSEX', 'Intersex'), ('LBQ', 'Lesbian Bisexual or Queer'), ('OTHER', 'Other Key Population Status')], max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('NB', 'Non-Binary')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Staff', 'Staff'), ('Community_leader', 'Community Leader'), ('CHW', 'Community Health Worker')], max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Event Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description of Event')),
                ('event_type', models.CharField(choices=[('Training', 'Training'), ('Activity', 'Activity'), ('Engagement', 'Engagement')], default='Training', max_length=25, verbose_name='Event Type')),
                ('location', models.CharField(max_length=255, verbose_name='Event Location')),
                ('event_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_created_by', to=settings.AUTH_USER_MODEL)),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='host', to='organizations.organization', verbose_name='Hosting Organization')),
                ('updated_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.organization')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='organizations',
            field=models.ManyToManyField(blank=True, through='events.EventOrganization', to='organizations.organization'),
        ),
        migrations.CreateModel(
            name='EventTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.task')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='tasks',
            field=models.ManyToManyField(blank=True, through='events.EventTask', to='projects.task'),
        ),
        migrations.CreateModel(
            name='DemographicCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField()),
                ('hiv_status', models.BooleanField(blank=True, null=True)),
                ('pregnancy', models.BooleanField(blank=True, null=True)),
                ('age_range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.agerange')),
                ('citizenship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.citizenship')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organizations.organization')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.task')),
                ('disability_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.disabilitytype')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('kp_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.keypopulationtype')),
                ('sex', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.sex')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='events.status')),
            ],
            options={
                'indexes': [models.Index(fields=['event'], name='events_demo_event_i_d7f072_idx'), models.Index(fields=['task'], name='events_demo_task_id_b6d018_idx')],
                'unique_together': {('event', 'sex', 'age_range', 'citizenship', 'task', 'hiv_status', 'pregnancy', 'disability_type', 'kp_type', 'status', 'organization')},
            },
        ),
    ]
